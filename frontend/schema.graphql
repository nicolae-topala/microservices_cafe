schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type AddProductVariantAttributePayload {
  errors: [AddProductVariantAttributeError!]
  productVariantAttribute: ProductVariantAttribute
}

type AddProductVariantPayload {
  errors: [AddProductVariantError!]
  product: Product
}

"A connection to a list of items."
type CategoriesConnection {
  "A list of edges."
  edges: [CategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [Category!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type CategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

type Category {
  id: ID!
  name: String!
  parentCategory: Category
  products: [Product]!
  subCategories: [Category]
}

type CreateCategoryPayload {
  category: Category
  errors: [CreateCategoryError!]
}

type CreateProductPayload {
  errors: [CreateProductError!]
  product: Product
}

type DeleteCategoryPayload {
  boolean: Boolean
  errors: [DeleteCategoryError!]
}

type DeleteProductPayload {
  boolean: Boolean
  errors: [DeleteProductError!]
}

type EditCategoryPayload {
  category: Category
  errors: [EditCategoryError!]
}

type EditProductPayload {
  errors: [EditProductError!]
  product: Product
}

type Mutation {
  addProductVariant(input: AddProductVariantInput!): AddProductVariantPayload!
  addProductVariantAttribute(input: AddProductVariantAttributeInput!): AddProductVariantAttributePayload!
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload!
  createProduct(input: CreateProductInput!): CreateProductPayload!
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload!
  deleteProduct(input: DeleteProductInput!): DeleteProductPayload!
  editCategory(input: EditCategoryInput!): EditCategoryPayload!
  editProduct(input: EditProductInput!): EditProductPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Price {
  amount: Decimal!
  currency: Currency!
}

type Product {
  categories: [Category]!
  description: String!
  id: ID!
  isInStock: Boolean!
  isVisible: Boolean!
  name: String!
  type: ProductType!
  variants: [ProductVariant]!
}

type ProductImage {
  altText: String
  id: ID!
  imageUrl: String!
  sortOrder: Int!
  variantId: ID!
}

type ProductVariant {
  id: ID!
  images: [ProductImage]!
  ingredients: [String]
  isInStock: Boolean!
  isVisible: Boolean!
  price: Price!
  productId: ID!
  variantAttributes: [ProductVariantAttribute]!
}

type ProductVariantAttribute {
  key: ProductVariantTypes!
  name: String!
  type: MeasurementType
  value: Float
}

"A connection to a list of items."
type ProductsConnection {
  "A list of edges."
  edges: [ProductsEdge!]
  "A flattened list of the nodes."
  nodes: [Product!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type ProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

type Query {
  categories("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [CategorySortInput!] where: CategoryFilterInput): CategoriesConnection
  products("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [ProductSortInput!] where: ProductFilterInput): ProductsConnection
  userInfo: UserInfoDto!
}

type ResultError implements Error {
  code: String!
  message: String!
}

type UserInfoDto {
  avatarUrl: String
  email: String
  sub: String
  userName: String
}

union AddProductVariantAttributeError = ResultError

union AddProductVariantError = ResultError

union CreateCategoryError = ResultError

union CreateProductError = ResultError

union DeleteCategoryError = ResultError

union DeleteProductError = ResultError

union EditCategoryError = ResultError

union EditProductError = ResultError

input AddProductVariantAttributeDtoInput {
  name: String!
  productVariantId: UUID!
  type: MeasurementType
  value: Decimal
}

input AddProductVariantAttributeInput {
  productVariantAttribute: AddProductVariantAttributeDtoInput!
}

input AddProductVariantDtoInput {
  currency: Currency!
  price: Decimal!
  productId: UUID!
}

input AddProductVariantInput {
  productVariant: AddProductVariantDtoInput!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  or: [CategoryFilterInput!]
  parentCategory: CategoryFilterInput
  products: ListFilterInputTypeOfProductFilterInput
  subCategories: ListFilterInputTypeOfCategoryFilterInput
}

input CategorySortInput {
  id: SortEnumType
  name: SortEnumType
  parentCategory: CategorySortInput
}

input CreateCategoryDtoInput {
  name: String!
}

input CreateCategoryInput {
  category: CreateCategoryDtoInput!
}

input CreateProductDtoInput {
  categoryIds: [UUID!]!
  description: String!
  ingredients: [String!]!
  name: String!
  type: ProductType!
}

input CreateProductInput {
  product: CreateProductDtoInput!
}

input CurrencyOperationFilterInput {
  eq: Currency
  in: [Currency!]
  neq: Currency
  nin: [Currency!]
}

input DecimalOperationFilterInput {
  eq: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  neq: Decimal
  ngt: Decimal
  ngte: Decimal
  nin: [Decimal]
  nlt: Decimal
  nlte: Decimal
}

input DeleteCategoryInput {
  categoryId: UUID!
}

input DeleteProductInput {
  productId: UUID!
}

input EditCategoryDtoInput {
  id: UUID!
  name: String!
}

input EditCategoryInput {
  category: EditCategoryDtoInput!
}

input EditProductDtoInput {
  categoryId: UUID
  currency: Currency
  description: String
  id: UUID!
  ingredients: [String!]
  isInStock: Boolean
  isVisible: Boolean
  name: String
  price: Decimal
  type: ProductType
}

input EditProductInput {
  product: EditProductDtoInput!
}

input IntOperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int]
  nlt: Int
  nlte: Int
}

input ListFilterInputTypeOfCategoryFilterInput {
  all: CategoryFilterInput
  any: Boolean
  none: CategoryFilterInput
  some: CategoryFilterInput
}

input ListFilterInputTypeOfProductFilterInput {
  all: ProductFilterInput
  any: Boolean
  none: ProductFilterInput
  some: ProductFilterInput
}

input ListFilterInputTypeOfProductImageFilterInput {
  all: ProductImageFilterInput
  any: Boolean
  none: ProductImageFilterInput
  some: ProductImageFilterInput
}

input ListFilterInputTypeOfProductVariantAttributeFilterInput {
  all: ProductVariantAttributeFilterInput
  any: Boolean
  none: ProductVariantAttributeFilterInput
  some: ProductVariantAttributeFilterInput
}

input ListFilterInputTypeOfProductVariantFilterInput {
  all: ProductVariantFilterInput
  any: Boolean
  none: ProductVariantFilterInput
  some: ProductVariantFilterInput
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  any: Boolean
  none: StringOperationFilterInput
  some: StringOperationFilterInput
}

input NullableOfMeasurementTypeOperationFilterInput {
  eq: MeasurementType
  in: [MeasurementType]
  neq: MeasurementType
  nin: [MeasurementType]
}

input PriceFilterInput {
  amount: DecimalOperationFilterInput
  and: [PriceFilterInput!]
  currency: CurrencyOperationFilterInput
  or: [PriceFilterInput!]
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  categories: ListFilterInputTypeOfCategoryFilterInput
  description: StringOperationFilterInput
  id: UuidOperationFilterInput
  isInStock: BooleanOperationFilterInput
  isVisible: BooleanOperationFilterInput
  name: StringOperationFilterInput
  or: [ProductFilterInput!]
  type: ProductTypeOperationFilterInput
  variants: ListFilterInputTypeOfProductVariantFilterInput
}

input ProductImageFilterInput {
  altText: StringOperationFilterInput
  and: [ProductImageFilterInput!]
  id: UuidOperationFilterInput
  imageUrl: StringOperationFilterInput
  or: [ProductImageFilterInput!]
  sortOrder: IntOperationFilterInput
  variantId: UuidOperationFilterInput
}

input ProductSortInput {
  description: SortEnumType
  id: SortEnumType
  isInStock: SortEnumType
  isVisible: SortEnumType
  name: SortEnumType
  type: SortEnumType
}

input ProductTypeOperationFilterInput {
  eq: ProductType
  in: [ProductType!]
  neq: ProductType
  nin: [ProductType!]
}

input ProductVariantAttributeFilterInput {
  and: [ProductVariantAttributeFilterInput!]
  key: ProductVariantTypesOperationFilterInput
  name: StringOperationFilterInput
  or: [ProductVariantAttributeFilterInput!]
  type: NullableOfMeasurementTypeOperationFilterInput
  value: DecimalOperationFilterInput
}

input ProductVariantFilterInput {
  and: [ProductVariantFilterInput!]
  id: UuidOperationFilterInput
  images: ListFilterInputTypeOfProductImageFilterInput
  ingredients: ListStringOperationFilterInput
  isInStock: BooleanOperationFilterInput
  isVisible: BooleanOperationFilterInput
  or: [ProductVariantFilterInput!]
  price: PriceFilterInput
  productId: UuidOperationFilterInput
  variantAttributes: ListFilterInputTypeOfProductVariantAttributeFilterInput
}

input ProductVariantTypesOperationFilterInput {
  eq: ProductVariantTypes
  in: [ProductVariantTypes!]
  neq: ProductVariantTypes
  nin: [ProductVariantTypes!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

input UuidOperationFilterInput {
  eq: UUID
  gt: UUID
  gte: UUID
  in: [UUID]
  lt: UUID
  lte: UUID
  neq: UUID
  ngt: UUID
  ngte: UUID
  nin: [UUID]
  nlt: UUID
  nlte: UUID
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "After the resolver was executed."
  AFTER_RESOLVER
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum Currency {
  EUR
  USD
}

enum MeasurementType {
  GRAMS
  KILOGRAMS
  LITERS
  MILLILITERS
  UNITS
}

enum ProductType {
  OFFLINE
  ONLINE
}

enum ProductVariantTypes {
  GRINDING
  ROAST
  SIZE
}

enum SortEnumType {
  ASC
  DESC
}

"The built-in `Decimal` scalar type."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")