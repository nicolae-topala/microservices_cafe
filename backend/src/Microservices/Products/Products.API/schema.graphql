schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type AddProductVariantAttributePayload {
  boolean: Boolean
  errors: [AddProductVariantAttributeError!]
}

type AddProductVariantPayload {
  product: Product
  errors: [AddProductVariantError!]
}

"A connection to a list of items."
type CategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [Category!]
}

"An edge in a connection."
type CategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

type Category {
  id: ID!
  name: String!
  products: [Product]!
  parentCategory: Category
  subCategories: [Category]
}

type CreateCategoryPayload {
  category: Category
  errors: [CreateCategoryError!]
}

type CreateProductPayload {
  product: Product
  errors: [CreateProductError!]
}

type DeleteCategoryPayload {
  boolean: Boolean
  errors: [DeleteCategoryError!]
}

type DeleteProductPayload {
  boolean: Boolean
  errors: [DeleteProductError!]
}

type EditCategoryPayload {
  category: Category
  errors: [EditCategoryError!]
}

type EditProductPayload {
  product: Product
  errors: [EditProductError!]
}

type Mutation @authorize @authorize {
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload! @cost(weight: "10")
  editCategory(input: EditCategoryInput!): EditCategoryPayload! @cost(weight: "10")
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload! @cost(weight: "10")
  createProduct(input: CreateProductInput!): CreateProductPayload! @cost(weight: "10")
  addProductVariant(input: AddProductVariantInput!): AddProductVariantPayload! @cost(weight: "10")
  addProductVariantAttribute(input: AddProductVariantAttributeInput!): AddProductVariantAttributePayload! @cost(weight: "10")
  editProduct(input: EditProductInput!): EditProductPayload! @cost(weight: "10")
  deleteProduct(input: DeleteProductInput!): DeleteProductPayload! @cost(weight: "10")
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Price {
  amount: Decimal!
  currency: Currency!
}

type Product {
  id: ID!
  name: String!
  description: String!
  variants: [ProductVariant]!
  type: ProductType!
  categories: [Category]!
  isVisible: Boolean!
  isInStock: Boolean!
}

type ProductImage {
  id: ID!
  productVariant: [ProductVariant]
  imageUrl: String!
  altText: String
  sortOrder: Int!
}

type ProductVariant {
  id: ID!
  product: Product!
  isInStock: Boolean!
  isVisible: Boolean!
  price: Price!
  images: [ProductImage]!
  variantAttributes: [ProductVariantAttribute]!
}

type ProductVariantAttribute {
  id: ID!
  value: String
  attributeDefinition: VariantAttributeDefinition
  unitsOfMeasure: UnitsOfMeasure
}

"A connection to a list of items."
type ProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductsEdge!]
  "A flattened list of the nodes."
  nodes: [Product!]
}

"An edge in a connection."
type ProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

type Query {
  categories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CategoryFilterInput @cost(weight: "10") order: [CategorySortInput!] @cost(weight: "10")): CategoriesConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  products("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductFilterInput @cost(weight: "10") order: [ProductSortInput!] @cost(weight: "10")): ProductsConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
}

type Recipe {
  id: ID!
  name: String!
  description: String!
  instructions: String!
  preparationTimeInMinutes: Int!
  isPublished: Boolean!
  productVariant: ProductVariant
  ingredients: [RecipeIngredient]!
}

type RecipeIngredient {
  id: ID!
  quantity: Float!
  recipe: Recipe!
  unitsOfMeasure: UnitsOfMeasure
  productVariant: ProductVariant
}

type ResultError implements Error {
  code: String!
  message: String!
}

type UnitsOfMeasure {
  id: ID!
  name: String!
  abbreviation: String!
  description: String
}

type VariantAttributeDefinition {
  id: ID!
  name: String!
  description: String
}

union AddProductVariantAttributeError = ResultError

union AddProductVariantError = ResultError

union CreateCategoryError = ResultError

union CreateProductError = ResultError

union DeleteCategoryError = ResultError

union DeleteProductError = ResultError

union EditCategoryError = ResultError

union EditProductError = ResultError

input AddProductVariantAttributeDtoInput {
  productVariantId: UUID!
  value: String!
  attributeDefinitionId: UUID!
  unitsOfMeasureId: UUID
}

input AddProductVariantAttributeInput {
  productVariantAttribute: AddProductVariantAttributeDtoInput!
}

input AddProductVariantDtoInput {
  productId: UUID!
  price: Decimal!
  currency: Currency!
}

input AddProductVariantInput {
  productVariant: AddProductVariantDtoInput!
}

input BooleanOperationFilterInput {
  eq: Boolean @cost(weight: "10")
  neq: Boolean @cost(weight: "10")
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  or: [CategoryFilterInput!]
  name: StringOperationFilterInput
  parentCategoryId: UuidOperationFilterInput
  parentCategory: CategoryFilterInput
  products: ListFilterInputTypeOfProductFilterInput
  subCategories: ListFilterInputTypeOfCategoryFilterInput
  id: UuidOperationFilterInput
}

input CategorySortInput {
  name: SortEnumType @cost(weight: "10")
  parentCategoryId: SortEnumType @cost(weight: "10")
  parentCategory: CategorySortInput @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
}

input CreateCategoryDtoInput {
  name: String!
}

input CreateCategoryInput {
  category: CreateCategoryDtoInput!
}

input CreateProductDtoInput {
  name: String!
  description: String!
  type: ProductType!
  ingredients: [String!]!
  categoryIds: [UUID!]!
}

input CreateProductInput {
  product: CreateProductDtoInput!
}

input CurrencyOperationFilterInput {
  eq: Currency @cost(weight: "10")
  neq: Currency @cost(weight: "10")
  in: [Currency!] @cost(weight: "10")
  nin: [Currency!] @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input DeleteCategoryInput {
  categoryId: UUID!
}

input DeleteProductInput {
  productId: UUID!
}

input EditCategoryDtoInput {
  id: UUID!
  name: String!
}

input EditCategoryInput {
  category: EditCategoryDtoInput!
}

input EditProductDtoInput {
  id: UUID!
  name: String
  description: String
  price: Decimal
  currency: Currency
  type: ProductType
  ingredients: [String!]
  categoryId: UUID
  isVisible: Boolean
  isInStock: Boolean
}

input EditProductInput {
  product: EditProductDtoInput!
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ListFilterInputTypeOfCategoryFilterInput {
  all: CategoryFilterInput @cost(weight: "10")
  none: CategoryFilterInput @cost(weight: "10")
  some: CategoryFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProductFilterInput {
  all: ProductFilterInput @cost(weight: "10")
  none: ProductFilterInput @cost(weight: "10")
  some: ProductFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProductImageFilterInput {
  all: ProductImageFilterInput @cost(weight: "10")
  none: ProductImageFilterInput @cost(weight: "10")
  some: ProductImageFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProductVariantAttributeFilterInput {
  all: ProductVariantAttributeFilterInput @cost(weight: "10")
  none: ProductVariantAttributeFilterInput @cost(weight: "10")
  some: ProductVariantAttributeFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProductVariantFilterInput {
  all: ProductVariantFilterInput @cost(weight: "10")
  none: ProductVariantFilterInput @cost(weight: "10")
  some: ProductVariantFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input PriceFilterInput {
  and: [PriceFilterInput!]
  or: [PriceFilterInput!]
  amount: DecimalOperationFilterInput
  currency: CurrencyOperationFilterInput
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  isVisible: BooleanOperationFilterInput
  isInStock: BooleanOperationFilterInput
  type: ProductTypeOperationFilterInput
  categories: ListFilterInputTypeOfCategoryFilterInput
  variants: ListFilterInputTypeOfProductVariantFilterInput
  id: UuidOperationFilterInput
}

input ProductImageFilterInput {
  and: [ProductImageFilterInput!]
  or: [ProductImageFilterInput!]
  imageUrl: StringOperationFilterInput
  altText: StringOperationFilterInput
  sortOrder: IntOperationFilterInput
  productVariantId: UuidOperationFilterInput
  productVariant: ProductVariantFilterInput
  id: UuidOperationFilterInput
}

input ProductSortInput {
  name: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  isVisible: SortEnumType @cost(weight: "10")
  isInStock: SortEnumType @cost(weight: "10")
  type: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
}

input ProductTypeOperationFilterInput {
  eq: ProductType @cost(weight: "10")
  neq: ProductType @cost(weight: "10")
  in: [ProductType!] @cost(weight: "10")
  nin: [ProductType!] @cost(weight: "10")
}

input ProductVariantAttributeFilterInput {
  and: [ProductVariantAttributeFilterInput!]
  or: [ProductVariantAttributeFilterInput!]
  value: StringOperationFilterInput
  attributeDefinitionId: UuidOperationFilterInput
  unitsOfMeasureId: UuidOperationFilterInput
  attributeDefinition: VariantAttributeDefinitionFilterInput
  unitsOfMeasure: UnitsOfMeasureFilterInput
  id: UuidOperationFilterInput
}

input ProductVariantFilterInput {
  and: [ProductVariantFilterInput!]
  or: [ProductVariantFilterInput!]
  isInStock: BooleanOperationFilterInput
  isVisible: BooleanOperationFilterInput
  price: PriceFilterInput
  productId: UuidOperationFilterInput
  product: ProductFilterInput
  images: ListFilterInputTypeOfProductImageFilterInput
  variantAttributes: ListFilterInputTypeOfProductVariantAttributeFilterInput
  id: UuidOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input UnitsOfMeasureFilterInput {
  and: [UnitsOfMeasureFilterInput!]
  or: [UnitsOfMeasureFilterInput!]
  name: StringOperationFilterInput
  abbreviation: StringOperationFilterInput
  description: StringOperationFilterInput
  id: UuidOperationFilterInput
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

input VariantAttributeDefinitionFilterInput {
  and: [VariantAttributeDefinitionFilterInput!]
  or: [VariantAttributeDefinitionFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  id: UuidOperationFilterInput
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum Currency {
  EUR
  USD
}

enum ProductType {
  ONLINE
  OFFLINE
}

enum SortEnumType {
  ASC
  DESC
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")